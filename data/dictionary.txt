lexical:{
    void: 
    {
        num: [0-9];
        letter: [a-z]|[A-Z];
        char_instring:['\40'-'\41'] | ['\43'-'\133'] | ['\135'-'\177'];
        ESC: '\\'(     (<octa><octa>?<octa>?) | (x|X)<hexa><hexa>?
				|     (v|t|r|n|f|b|a|'\\'|'?'|'\''|'\"'|['\0'])   
				);
    }
    id: id(+1): (<letter> | _)(<letter> | _ | <num>)*;
    void: 
    {
        sign: ('-'|'+')?;
        char_instring:['\40'-'\41'] | ['\43'-'\176'];
    }
    number: 
    {
        integer(+3): <sign><num>+;
        real(+1):  <integer>'.'<num>+((e|E)<integer>)?;
    }
    string: 
    {
        string:'\"' ( <char_instring> | <ESC> ) *'\"';
    }
    reserved(+5):
	{
        false;
		true;
		null;
		NULL;				
	};
    division:
	{
		semicolon:';';
		colon:':';
		dot: '.';
        comma: ',';
	}
    value: value: '=';
    braket:
    {
        braceL:'{';
		braceR:'}';
		left:'(';
		right: ')';
		squareL: '[';
		squareR: ']';
    };
    void:
    {
        AC:(['\0'-'\51']|['\53'-'\56']|['\60'-'\177']);
    }
    anntation:
	{
		anntationS: '/''/'(['\0'-'\11']|['\13'-'\177'])*'\n';
		anntationM: '/''*'('/'|<AC>|'*'+<AC>)*'*'+'/';
	}
	format:
	{
		spaces: ' '+;
		enters: ('\n'| '\r''\n')+;
		tab: '\t';
	}
};
grammar: DICTIONARY:
{
    DICTIONARY: braceL KVS braceR; 
    KVS:{
        single: KV;
        multi: KVS KV; 
    }
    KV: {
        value: id value VALUE semicolon;
        colon: id colon VALUE semicolon; 
    }
    VALUE: 
    {
        nul: squareL squareR;
        single: UNIT; 
        multi: squareL UNITS squareR;
    }
    UNITS:
    {
        single: UNIT;
        multi: UNITS comma UNIT; 
    }
    UNIT: 
    {
        dictionary: DICTIONARY;
        false: false;
		true: true;
		null: null;
		NULL: NULL;
        real: real;
        integer: integer;
        string: string;
    }
}
