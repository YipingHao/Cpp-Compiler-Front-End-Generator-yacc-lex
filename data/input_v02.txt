lexical:{
	void:
	{
		idC: [a-z]|[A-Z]|_|[0-9];
		num: [0-9];
		hexa: [0-9]|[a-f]|[A-F];
		octa: [0-7];
	}
	identifier: identifier(+1): ([a-z]|[A-Z]|_)<idC>+;
	const:
	{
		integer: '+'<num>+;
		CommonChar: '\''(
			'\\'(     (<octa><octa>?<octa>?) | (x|X)<hexa><hexa>?
				|     (v|t|r|n|f|b|a|'\\'|'?'|'\''|'\"'|['\0'])   
				)
			|([' '-'!']|['#'-'&']|['('-'/']|['0'-'[']|[']'-'~'])
			)'\'';
		idChar: <idC>; 
	};
	reserved(+5):
	{
		lexical;
		grammar;
		void;
		all;					
	};
	format:
	{
		spaces: ' '+;
		enters: ('\n'| '\r''\n')+;
		tab: '\t';
	}
	division:
	{
		semicolon:';';
		colon:':';
		dot: '.';
	}
	braket:
	{
		braceL:'{';
		braceR:'}';
		left:'(';
		right: ')';
		squareL: '[';
		squareR: ']';		
		angleL: '<';
		angleR: '>';
	}
	void:
    {
        AC:(['\0'-'\51']|['\53'-'\56']|['\60'-'\177']);
    }
    anntation:
	{
		anntationS: '/''/'(['\0'-'\11']|['\13'-'\177'])*;
		anntationM: '/''*'('/'|<AC>|'*'+<AC>)*'*'+'/';
	}
	RegSymbol:
	{
		range: '-';
		star: '*';        //zero or more
		plus: '+';        //one or more
		question: '?';    //zero or one, not wildcard
		or: '|';
	}		
};

//after lexical analysis 'anntation' and 'format' unit will be discarded 

grammar: TEXT: {
	TEXT: {
		OnlyL: lexical BEGIN LEXICAL END;
		LG: lexical BEGIN LEXICAL END grammar colon identifier BEGIN GRAMMAR END;};
//LEXICAL part:
	LEXICAL: {
		single: RegGROUP; 
		multi: LEXICAL RegGROUP;};
	RegGROUP: {
		single: RegGROUPNAME colon RegDEF;
		multi: RegGROUPNAME BEGIN REGDEFS END;};
	REGDEFS:{
		single: RegDEF;
		multi: REGDEFS RegDEF;}
	RegDEF: {
		default: RegNAME semicolon;
		full: RegNAME colon REGBODY semicolon;}
	RegGROUPNAME: {
		blocks: void;
		bare: identifier;
		priority: identifier left integer right;}
	RegNAME:{
		bare: RegNAMEHead;
		priority: RegNAMEHead left integer right;};
	RegNAMEHead:
	{
		avoid: void;
		alexical: lexical;
		agrammar: grammar;
		aall: all;
		aid: identifier;
	}
	REGBODY: REGEXPRESSor;
	REGEXPRESSor:{
		single: REGEXPRESS;
		ororor: REGEXPRESSor or REGEXPRESS;};
	REGEXPRESS:{
		single: RegCOMPLEX;
		multi: REGEXPRESS RegCOMPLEX;};
	RegCOMPLEX:{
		single: RegNODE;
		multi1: RegCOMPLEX plus;
		multi2: RegCOMPLEX star;
		multi3: RegCOMPLEX question;};
	RegNODE:{
		single: RegLEAF;
		braket: left REGEXPRESSor right;
		replace: angleL identifier angleR;};
	RegLEAF:{
		single: RegCHAR;
		single2: squareL RegCHAR squareR;
		range: squareL RegCHAR range RegCHAR squareR;};
	RegCHAR:{
		commom: CommonChar;
		id: idChar;
	};
//GRAMMAR
	GRAMMAR:{
		single: GrammerDEF;
		multi: GRAMMAR GrammerDEF;
	}	
	GrammerDEF:{
		single: GNameALL colon GFORMULA semicolon;
		multi: GNameALL BEGIN GnameFORMULAS END;
	}
	GnameFORMULAS:{
		single: GNameALL colon GFORMULA semicolon;
		multi: GnameFORMULAS GNameALL colon GFORMULA semicolon;
	}
	GNameALL:
	{
		explicit: identifier;
		implicit: angleL identifier angleR;
	}
	GFORMULA:{
		unit: GFORMULAUnit;
		more: GFORMULA GFORMULAUnit;
		plus: GFORMULAUnit plus;
		star: GFORMULAUnit star;
	};
	GFORMULAUnit:
	{
		avoid: void;
		alexical: lexical;
		agrammar: grammar;
		aall: all;
		aid: identifier;// a single lexical unit;
		aImplicit: angleL identifier angleR; 
		group: squareL identifier squareR;
		// use a group of lexical unit instead of a single one
	};

	END:{
		full: braceR semicolon;
		half: braceR;
	}
	BEGIN: colon braceL; 

};

